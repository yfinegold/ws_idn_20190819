paste0(ag_dir,"commodities.tif"),
paste0(lc_dir,"tmp_gain.tif"),
paste0("(B==8)*(B==9)*1")
))
gdalinfo(paste0(lc_dir,"tmp_gain.tif"),mm=T)
plot(raster(paste0(lc_dir,"tmp_gain.tif")))
############################ CREATE THE GAIN LAYER
system(sprintf("gdal_calc.py -A %s -B %s -C %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),
lcc_map,
paste0(ag_dir,"commodities.tif"),
paste0(lc_dir,"tmp_gain.tif"),
paste0("(B==8)+(B==9)*1")
))
plot(raster(paste0(lc_dir,"tmp_gain.tif")))
############################ CREATE THE GAIN LAYER
system(sprintf("gdal_calc.py -A %s -B %s -C %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),
lcc_map,
paste0(ag_dir,"commodities.tif"),
paste0(lc_dir,"tmp_gain.tif"),
paste0("(B==8)+(B==9)")
))
############################ CREATE THE GAIN LAYER
system(sprintf("gdal_calc.py -A %s -B %s -C %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),
lcc_map,
paste0(ag_dir,"commodities.tif"),
paste0(lc_dir,"tmp_gain.tif"),
paste0("(B==9)")
))
plot(raster(paste0(lc_dir,"tmp_gain.tif")))
plot(raster(lcc_map))
lc_dir
############################ CREATE THE GAIN LAYER
system(sprintf("gdal_calc.py -A %s -B %s -C %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),
lcc_map,
paste0(ag_dir,"commodities.tif"),
paste0(lc_dir,"tmp_gain.tif"),
paste0("(B==9)")
))
############################ CREATE THE GAIN LAYER
system(sprintf("gdal_calc.py -A %s -B %s -C %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),
lcc_map,
paste0(ag_dir,"commodities.tif"),
paste0(lc_dir,"tmp_gain.tif"),
paste0("(B==9)")
))
paste0("(B==9)")
############################ CREATE THE GAIN LAYER
system(sprintf("gdal_calc.py -A %s -B %s -C %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),
lcc_map,
paste0(ag_dir,"commodities.tif"),
paste0(lc_dir,"tmp_gain.tif"),
paste0("(B==9)")
))
gdalinfo(paste0(lc_dir,"tmp_gain.tif"),mm=T)
############################ CREATE THE GAIN LAYER
system(sprintf("gdal_calc.py -A %s -B %s -C %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),
lcc_map,
paste0(ag_dir,"commodities.tif"),
paste0(lc_dir,"tmp_gain.tif"),
paste0("(B==9)")
))
mmu <- 11
source('~/liberia_activity_data/scripts/s0_parameters.R')
#################
## RUN THE SCRIPT
time_start  <- Sys.time()
####################################################################################
####### PREPARE COMMODITY MAP (RASTERIZE AND CLIP TO EXTENT)
####################################################################################
shp <- readOGR(paste0(ag_dir,"all_farms_merged.shp"))
dbf <- shp@data
dbf$unique_id <- row(dbf)[,1]
shp@data <- dbf
shp <- spTransform(shp,CRS('+init=epsg:4326'))
#################### ALIGN PRODUCTS ON MASK: BFAST RESULTS
mask   <- lcc_map
proj   <- proj4string(raster(mask))
extent <- extent(raster(mask))
res    <- res(raster(mask))[1]
#################### INPUT : GEOVILLE MAP 2015
input  <- paste0(lc_dir,"LCF2015_Liberia_32629_10m.tif")
ouput  <- paste0(lc_dir,"lc_2015.tif")
############################ CREATE THE GAIN LAYER
system(sprintf("gdal_calc.py -A %s -B %s -C %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),
lcc_map,
paste0(ag_dir,"commodities.tif"),
paste0(lc_dir,"tmp_gain.tif"),
paste0("(B==9)")
))
lcc_map <- paste0(bfst_dir,list.files(bfst_dir,pattern = glob2rx("*.tif"))[1])
#################### ALIGN PRODUCTS ON MASK: BFAST RESULTS
mask   <- lcc_map
############################ CREATE THE GAIN LAYER
system(sprintf("gdal_calc.py -A %s -B %s -C %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),
lcc_map,
paste0(ag_dir,"commodities.tif"),
paste0(lc_dir,"tmp_gain.tif"),
paste0("(B==9)")
))
############################ CREATE THE GAIN LAYER
system(sprintf("gdal_calc.py -A %s -B %s -C %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),
lcc_map,
paste0(ag_dir,"commodities.tif"),
paste0(lc_dir,"tmp_gain.tif"),
paste0("(B==9)*(B==8)*1+((A==14)*(A==16)*(C==0)*0)")
))
gdalinfo(paste0(lc_dir,"tmp_gain.tif"),mm=T)
plot(raster(paste0(lc_dir,"tmp_gain.tif")))
#################
## RUN THE SCRIPT
library(gdalUtils)
gdalinfo(paste0(lc_dir,"tmp_gain.tif"),mm=T)
############################ CREATE THE GAIN LAYER
system(sprintf("gdal_calc.py -A %s -B %s -C %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),
lcc_map,
paste0(ag_dir,"commodities.tif"),
paste0(lc_dir,"tmp_gain.tif"),
paste0("(B==9)*(B==8)*1+(A==14)*(A==16)*(C==0)*0")
))
gdalinfo(paste0(lc_dir,"tmp_gain.tif"),mm=T)
############################ CREATE THE GAIN LAYER
system(sprintf("gdal_calc.py -A %s -B %s -C %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),
lcc_map,
paste0(ag_dir,"commodities.tif"),
paste0(lc_dir,"tmp_gain.tif"),
paste0("((B==8)+(B==9))*((A==14)+(A==16))")
))
gdalinfo(paste0(lc_dir,"tmp_gain.tif"),mm=T)
plot(raster(paste0(lc_dir,"tmp_gain.tif")))
############################ CREATE THE GAIN LAYER
system(sprintf("gdal_calc.py -A %s -B %s -C %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),
lcc_map,
paste0(ag_dir,"commodities.tif"),
paste0(lc_dir,"tmp_gain.tif"),
paste0("((B==8)*(B==9)*1)+((A==14)*(A==16)*0)")
))
gdalinfo(paste0(lc_dir,"tmp_gain.tif"),mm=T)
############################ CREATE THE GAIN LAYER
system(sprintf("gdal_calc.py -A %s -B %s -C %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),
lcc_map,
paste0(ag_dir,"commodities.tif"),
paste0(lc_dir,"tmp_gain.tif"),
paste0("((B==8)+(B==9)*1)+((A==14)*(A==16)*0)")
))
gdalinfo(paste0(lc_dir,"tmp_gain.tif"),mm=T)
############################ CREATE THE GAIN LAYER
system(sprintf("gdal_calc.py -A %s -B %s -C %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),
lcc_map,
paste0(ag_dir,"commodities.tif"),
paste0(lc_dir,"tmp_gain.tif"),
paste0("((B==8)+(B==9))+((A==14)+(A==16))*(C==0)")
))
plot(raster(paste0(lc_dir,"tmp_gain.tif")))
gdalinfo(paste0(lc_dir,"tmp_gain.tif"),mm=T)
############################ CREATE THE GAIN LAYER
system(sprintf("gdal_calc.py -A %s -B %s -C %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),
lcc_map,
paste0(ag_dir,"commodities.tif"),
paste0(lc_dir,"tmp_gain.tif"),
paste0("((B==8)+(B==9))+((A==14)*(A==16)*2)*(C==0)")
))
gdalinfo(paste0(lc_dir,"tmp_gain.tif"),mm=T)
plot(raster(paste0(lc_dir,"tmp_gain.tif")))
#################### SIEVE TO THE MMU
system(sprintf("gdal_sieve.py -st %s %s %s ",
mmu,
paste0(lc_dir,"tmp_loss.tif"),
paste0(lc_dir,'tmp_loss_sieve.tif')
))
############################ CREATE THE LOSS LAYER
system(sprintf("gdal_calc.py -A %s -B %s -C %s -D %s -E %s -F %s -G %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),           # A - geoville map
lcc_map,                                # B - bfast thresholds
paste0(ag_dir,"commodities.tif"),       # C - commodities
paste0(lc_dir,"tmp_loss.tif"),          # D - bfast loss all
paste0(lc_dir,  'loss_sieve.tif' ),     # E - bfast loss >1ha
paste0(lc_dir,  'loss_sieve_inf.tif' ), # F - bfast loss <1ha
paste0(lc_dir,"tmp_gain.tif"),          # G - bfast gain
paste0(lc_dir,  'lc_2018.tif' ),
paste0( "(A==1)*(E==1)*5 + ",
"(A==1)*(F==1)*2 +",
"(A==1)*(G==1)*1 +",
"(A==2)*(E==1)*5 +",
"(A==2)*(F==1)*3 +",
"(A==2)*(G==1)*1 +",
"(A==3)*(E==1)*5 +",
"(A==3)*(F==1)*5 +",
"(A==3)*(G==1)*2 +",
"(A==4)*(D==1)*13 +",
"(A==4)*(G==1)*4 +",
"(A==5)*(D==1)*11 +",
"(A==5)*(G==1)*3 +",
"(A==18)*(D==1)*11 +",
"(A==18)*(G==1)*19 + ",# gain in grassland savannah - potential classes - 5,9,11
"(A==6)*(D==1)*11 +",
"(A==6)*(G==1)*20 + ",# gain in shrubs - potential classes - 9,11
"(A==7)*(D==1)*21 + ",# loss in rubber smallholder - potential classes - 9,11
"(A==7)*(G==1)*7 +",
"(A==8)*(D==1)*8 +",
"(A==8)*(G==1)*8 +",
"(A==9)*(D==1)*22 + ",# loss in oil palm smallholder - potential classes - 7,11
"(A==9)*(G==1)*3 +",
"(A==10)*(D==1)*10 +",
"(A==10)*(G==1)*10 +",
"(A==11)*(D==1)*11 +",
"(A==11)*(G==1)*3 +",
"(A==12)*(D==1)*12 +",
"(A==12)*(G==1)*12 +",
"(A==13)*(D==1)*23 + ",# loss in swamps - potential classes - 7,11
"(A==13)*(G==1)*4 +",
"(A==16)*(D==1)*15 +",
"(A==16)*(G==1)*16 + ",
"(A==14)*(D==1)*14 +",
"(A==14)*(G==1)*24 + ",# gain in surface water - potential classes - 4,13
"(A==15)*(D==1)*15 +",
"(A==15)*(G==1)*18 +",
"(A==17)*(D==1)*17 +",
"(A==17)*(G==1)*18 +",
"(D==0)*(G==0)*A+",
"(C==0)*0"
,collapse = "")
))
gdalinfo( paste0(lc_dir,  'lc_2018.tif' ),mm=T)
#################### SIEVE TO THE MMU
system(sprintf("gdal_sieve.py -8 -st %s %s %s ",
mmu,
paste0(lc_dir,"tmp_loss.tif"),
paste0(lc_dir,'tmp_loss_sieve.tif')
))
#################### SIEVE OUT INDIVIDUAL PIXELS
system(sprintf("gdal_sieve.py -st 1 %s %s ",
mmu,
paste0(lc_dir,"tmp_loss.tif"),
paste0(lc_dir,'tmp_loss_sieve1.tif')
))
#################### SIEVE OUT INDIVIDUAL PIXELS
system(sprintf("gdal_sieve.py -st 1 %s %s ",
mmu,
paste0(lc_dir,"tmp_gain.tif"),
paste0(lc_dir,'tmp_gain_sieve1.tif')
))
## Compress sieved
system(sprintf("gdal_translate -ot byte -co COMPRESS=LZW %s %s",
paste0(lc_dir,'tmp_loss_sieve1.tif'),
paste0(lc_dir,  'loss_sieve1.tif' )
))
## Compress sieved
system(sprintf("gdal_translate -ot byte -co COMPRESS=LZW %s %s",
paste0(lc_dir,'tmp_gain_sieve1.tif'),
paste0(lc_dir,  'gain_sieve1.tif' )
))
## Compress sieved
system(sprintf("gdal_translate -ot byte -co COMPRESS=LZW %s %s",
paste0(lc_dir,'tmp_loss_sieve.tif'),
paste0(lc_dir,  'loss_sieve.tif' )
))
#################### DIFFERENCE BETWEEN SIEVED AND ORIGINAL
system(sprintf("gdal_calc.py -A %s -B %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"tmp_loss.tif"),
paste0(lc_dir,  'loss_sieve.tif' ),
paste0(lc_dir,  'loss_sieve_inf.tif' ),
paste0("(A>0)*(A-B)+(A==0)*(B==1)*0")
))
############################ CREATE THE UPDATED LAND COVER MAP FOR 2018
system(sprintf("gdal_calc.py -A %s -B %s -C %s -D %s -E %s -F %s -G %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),           # A - geoville map
lcc_map,                                # B - bfast thresholds
paste0(ag_dir,"commodities.tif"),       # C - commodities
paste0(lc_dir,  'loss_sieve1.tif' ),    # D - bfast loss all
paste0(lc_dir,  'loss_sieve.tif' ),     # E - bfast loss >1ha
paste0(lc_dir,  'loss_sieve_inf.tif' ), # F - bfast loss <1ha
paste0(lc_dir,  'gain_sieve1.tif' ),    # G - bfast gain
paste0(lc_dir,  'lc_2018.tif' ),
paste0( "(A==1)*(E==1)*5 + ",
"(A==1)*(F==1)*2 +",
"(A==1)*(G==1)*1 +",
"(A==2)*(E==1)*5 +",
"(A==2)*(F==1)*3 +",
"(A==2)*(G==1)*1 +",
"(A==3)*(E==1)*5 +",
"(A==3)*(F==1)*5 +",
"(A==3)*(G==1)*2 +",
"(A==4)*(D==1)*13 +",
"(A==4)*(G==1)*4 +",
"(A==5)*(D==1)*11 +",
"(A==5)*(G==1)*3 +",
"(A==18)*(D==1)*11 +",
"(A==18)*(G==1)*19 + ",# gain in grassland savannah - potential classes - 5,9,11
"(A==6)*(D==1)*11 +",
"(A==6)*(G==1)*20 + ",# gain in shrubs - potential classes - 9,11
"(A==7)*(D==1)*21 + ",# loss in rubber smallholder - potential classes - 9,11
"(A==7)*(G==1)*7 +",
"(A==8)*(D==1)*8 +",
"(A==8)*(G==1)*8 +",
"(A==9)*(D==1)*22 + ",# loss in oil palm smallholder - potential classes - 7,11
"(A==9)*(G==1)*3 +",
"(A==10)*(D==1)*10 +",
"(A==10)*(G==1)*10 +",
"(A==11)*(D==1)*11 +",
"(A==11)*(G==1)*3 +",
"(A==12)*(D==1)*12 +",
"(A==12)*(G==1)*12 +",
"(A==13)*(D==1)*23 + ",# loss in swamps - potential classes - 7,11
"(A==13)*(G==1)*4 +",
"(A==16)*(D==1)*15 +",
"(A==16)*(G==1)*16 + ",
"(A==14)*(D==1)*14 +",
"(A==14)*(G==1)*24 + ",# gain in surface water - potential classes - 4,13
"(A==15)*(D==1)*15 +",
"(A==15)*(G==1)*18 +",
"(A==17)*(D==1)*17 +",
"(A==17)*(G==1)*18 +",
"(D==0)*(G==0)*A+",
"(C==0)*0"
,collapse = "")
))
gdalinfo( paste0(lc_dir,  'lc_2018.tif' ),mm=T)
#################### SIEVE OUT INDIVIDUAL PIXELS
system(sprintf("gdal_sieve.py -st 1 %s %s ",
paste0(lc_dir,"tmp_loss.tif"),
paste0(lc_dir,'tmp_loss_sieve1.tif')
))
#################### SIEVE OUT INDIVIDUAL PIXELS
system(sprintf("gdal_sieve.py -st 1 %s %s ",
paste0(lc_dir,"tmp_gain.tif"),
paste0(lc_dir,'tmp_gain_sieve1.tif')
))
## Compress sieved
system(sprintf("gdal_translate -ot byte -co COMPRESS=LZW %s %s",
paste0(lc_dir,'tmp_loss_sieve1.tif'),
paste0(lc_dir,  'loss_sieve1.tif' )
))
## Compress sieved
system(sprintf("gdal_translate -ot byte -co COMPRESS=LZW %s %s",
paste0(lc_dir,'tmp_gain_sieve1.tif'),
paste0(lc_dir,  'gain_sieve1.tif' )
))
## Compress sieved
system(sprintf("gdal_translate -ot byte -co COMPRESS=LZW %s %s",
paste0(lc_dir,'tmp_loss_sieve.tif'),
paste0(lc_dir,  'loss_sieve.tif' )
))
#################### DIFFERENCE BETWEEN SIEVED AND ORIGINAL
system(sprintf("gdal_calc.py -A %s -B %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"tmp_loss.tif"),
paste0(lc_dir,  'loss_sieve.tif' ),
paste0(lc_dir,  'loss_sieve_inf.tif' ),
paste0("(A>0)*(A-B)+(A==0)*(B==1)*0")
))
############################ CREATE THE UPDATED LAND COVER MAP FOR 2018
system(sprintf("gdal_calc.py -A %s -B %s -C %s -D %s -E %s -F %s -G %s --co COMPRESS=LZW --outfile=%s --calc=\"%s\"",
paste0(lc_dir,"lc_2015.tif"),           # A - geoville map
lcc_map,                                # B - bfast thresholds
paste0(ag_dir,"commodities.tif"),       # C - commodities
paste0(lc_dir,  'loss_sieve1.tif' ),    # D - bfast loss all
paste0(lc_dir,  'loss_sieve.tif' ),     # E - bfast loss >1ha
paste0(lc_dir,  'loss_sieve_inf.tif' ), # F - bfast loss <1ha
paste0(lc_dir,  'gain_sieve1.tif' ),    # G - bfast gain
paste0(lc_dir,  'lc_2018.tif' ),
paste0( "(A==1)*(E==1)*5 + ",
"(A==1)*(F==1)*2 +",
"(A==1)*(G==1)*1 +",
"(A==2)*(E==1)*5 +",
"(A==2)*(F==1)*3 +",
"(A==2)*(G==1)*1 +",
"(A==3)*(E==1)*5 +",
"(A==3)*(F==1)*5 +",
"(A==3)*(G==1)*2 +",
"(A==4)*(D==1)*13 +",
"(A==4)*(G==1)*4 +",
"(A==5)*(D==1)*11 +",
"(A==5)*(G==1)*3 +",
"(A==18)*(D==1)*11 +",
"(A==18)*(G==1)*19 + ",# gain in grassland savannah - potential classes - 5,9,11
"(A==6)*(D==1)*11 +",
"(A==6)*(G==1)*20 + ",# gain in shrubs - potential classes - 9,11
"(A==7)*(D==1)*21 + ",# loss in rubber smallholder - potential classes - 9,11
"(A==7)*(G==1)*7 +",
"(A==8)*(D==1)*8 +",
"(A==8)*(G==1)*8 +",
"(A==9)*(D==1)*22 + ",# loss in oil palm smallholder - potential classes - 7,11
"(A==9)*(G==1)*3 +",
"(A==10)*(D==1)*10 +",
"(A==10)*(G==1)*10 +",
"(A==11)*(D==1)*11 +",
"(A==11)*(G==1)*3 +",
"(A==12)*(D==1)*12 +",
"(A==12)*(G==1)*12 +",
"(A==13)*(D==1)*23 + ",# loss in swamps - potential classes - 7,11
"(A==13)*(G==1)*4 +",
"(A==16)*(D==1)*15 +",
"(A==16)*(G==1)*16 + ",
"(A==14)*(D==1)*14 +",
"(A==14)*(G==1)*24 + ",# gain in surface water - potential classes - 4,13
"(A==15)*(D==1)*15 +",
"(A==15)*(G==1)*18 +",
"(A==17)*(D==1)*17 +",
"(A==17)*(G==1)*18 +",
"(D==0)*(G==0)*A+",
"(C==0)*0"
,collapse = "")
))
## Get the list of countries from getData: "getData"
(gadm_list  <- data.frame(raster::getData('ISO3')))
## Get GADM data, check object properties
country         <- raster::getData('GADM',path=gadm_dir , country= countrycode, level=1)
####################################################################################################
####################################################################################################
## Read, manipulate and write spatial vector data, Get GADM data
## Contact remi.dannunzio@fao.org
## 2018/08/22
####################################################################################################
####################################################################################################
# load parameters
source('~/ws_idn_20190819/scripts/s0_parameters.R')
## Get the list of countries from getData: "getData"
(gadm_list  <- data.frame(raster::getData('ISO3')))
## Get GADM data, check object properties
country         <- raster::getData('GADM',path=gadm_dir , country= countrycode, level=1)
summary(country)
extent(country)
proj4string(country)
## Display the SPDF
plot(country)
country$OBJECTID <- row(country)[,1]
##  Export the SpatialPolygonDataFrame as a ESRI Shapefile
writeOGR(country,
paste0(gadm_dir,"gadm_",countrycode,"_l1.shp"),
paste0("gadm_",countrycode,"_l1"),
"ESRI Shapefile",
overwrite_layer = T)
### What grid size do we need ?
grid_size <- 20000          ## in meters
grid_deg  <- grid_size/111320 ## in degree
sqr_df <- generate_grid(country,grid_deg)
nrow(sqr_df)
### Select a vector from location of another vector
aoi <- readOGR(paste0(phu_dir,"107_PHU_BOUNDARY.shp"))
### Select a vector from location of another vector
sqr_df_selected <- sqr_df[aoi,]
nrow(sqr_df_selected)
### Plot the results
plot(sqr_df_selected)
plot(aoi,add=T,border="blue")
plot(country,add=T,border="green")
### Give the output a decent name, with unique ID
names(sqr_df_selected@data) <- "tileID"
sqr_df_selected@data$tileID <- row(sqr_df_selected@data)[,1]
tiles <- sqr_df_selected
### Distribute samples among users
dt <- tiles@data
users <- read.csv(paste0(doc_dir,"participants_workshop_20190611.csv"))
du    <- data.frame(cbind(users$UserName,dt$tileID))
names(du) <- c("username","tileID")
du <- arrange(du,username)
df <- data.frame(cbind(du$username,dt$tileID))
names(df) <- c("username","tileID")
df$tileID <- as.numeric(df$tileID)
table(df$username)
tiles@data <- df
### Export ALL TILES as KML
export_name <- paste0("tiling_all_phu")
writeOGR(obj=tiles,
dsn=paste(tile_dir,export_name,".kml",sep=""),
layer= export_name,
driver = "KML",
overwrite_layer = T)
### Create a final subset corresponding to your username
my_tiles <- tiles[tiles$tileID %in% df[df$username == username,"tileID"],]
plot(my_tiles,add=T,col="red")
### Export the final subset
export_name <- paste0("tiles_phu_",username)
writeOGR(obj=my_tiles,
dsn=paste(tile_dir,export_name,".kml",sep=""),
layer= export_name,
driver = "KML",
overwrite_layer = T)
writeOGR(obj=tiles,
dsn=paste(tile_dir,export_name,".shp",sep=""),
layer= export_name,
driver = "ESRI Shapefile",
overwrite_layer = T)
writeOGR(obj=my_tiles,
dsn=paste(tile_dir,export_name,".shp",sep=""),
layer= export_name,
driver = "ESRI Shapefile",
overwrite_layer = T)
export_name
### Export ALL TILES as KML
export_name <- paste0("tiling_all_phu")
writeOGR(obj=tiles,
dsn=paste(tile_dir,export_name,".shp",sep=""),
layer= export_name,
driver = "ESRI Shapefile",
overwrite_layer = T)
reticulate::repl_python()
